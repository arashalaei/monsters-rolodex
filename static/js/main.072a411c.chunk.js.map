{"version":3,"sources":["components/card/card.component.jsx","components/card-list/CardList.component.jsx","components/search-box/SearchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","id","alt","key","name","email","CardList","monsters","map","monster","SearchBox","placeholder","changeHandler","type","onChange","App","e","setState","searchField","target","value","toLowerCase","state","fetch","then","response","json","users","filteredMonsters","this","filter","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,aAA+CC,IAAG,qBAAgBJ,EAAMK,KAAOJ,UAAU,gBACjG,oBAAIA,UAAU,gBAAd,SAA+BD,EAAMM,OACrC,sBAAML,UAAU,aAAhB,SAA8BD,EAAMO,YCH/BC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,kBAAf,SACKD,EAAMS,SAASC,KAAI,SAAAC,GAAO,OACf,cAAC,EAAD,CAEIR,GAASQ,EAAQR,GACjBG,KAASK,EAAQL,KACjBC,MAASI,EAAQJ,OAHRI,EAAQR,WCL5BS,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,cAAf,OACjB,uBACIC,KAAK,SACLF,YAAeA,EACfZ,UAAU,oCACVe,SAAYF,MCuCTG,E,kDAzCb,aAAc,IAAD,8BACX,gBAmBFH,cAAgB,SAACI,GACf,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,MAAMC,iBApB9B,EAAKC,MAAQ,CACXf,SAAU,GACVW,YAAa,IAJJ,E,qDASb,WAAoB,IAAD,OACjBK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKV,SAAS,CACZV,SAAUoB,S,oBAYlB,WAAS,IAAD,OAEAC,EADaC,KAAKP,MAAjBf,SAC2BuB,QAAO,SAAArB,GAAO,OAAIA,EAAQL,KAAKiB,cAAcU,SAAS,EAAKT,MAAMJ,gBACnG,OACE,sBAAKnB,UAAU,MAAf,UACE,cAAC,EAAD,CACEY,YAAc,iBACdC,cAAiBiB,KAAKjB,gBAExB,cAAC,EAAD,CAAUL,SAAYqB,W,GArCZI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.072a411c.chunk.js","sourcesContent":["import React from 'react';\nimport \"./card.styles.css\";\n\nexport const Card = (props) => (\n    <div className=\"card\">\n        <img src={`https://robohash.org/${props.id}?set=set2`} alt={`card photo ${props.key}`} className=\"card__photo\"/>\n        <h2 className=\"card__heading\">{props.name}</h2>\n        <span className=\"card__text\">{props.email}</span>\n    </div>\n)","import React from 'react';\nimport {Card} from './../card/card.component';\nimport './cardList.styles.css';\n\nexport const CardList = (props) => (\n    <div className=\"cards-container\">\n        {props.monsters.map(monster => \n                    <Card \n                        key   = {monster.id}\n                        id    = {monster.id}\n                        name  = {monster.name}\n                        email = {monster.email}/>)}\n    </div>\n);","import React from 'react';\nimport \"./SearchBox.styles.css\";\n\nexport const SearchBox = ({placeholder, changeHandler}) => (\n        <input \n            type=\"search\" \n            placeholder = {placeholder} \n            className=\"search-box u-margin-bottom-medium\" \n            onChange = {changeHandler}/>\n        );","import {Component} from 'react'\nimport './App.css';\nimport {CardList} from './components/card-list/CardList.component.jsx'\nimport {SearchBox} from './components/search-box/SearchBox.component.jsx'\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {\n        this.setState({\n          monsters: users\n        })\n      })\n\n  }\n\n  changeHandler = (e) => {\n    this.setState({\n      searchField: e.target.value.toLowerCase()\n    })\n  }\n\n  render(){\n    const {monsters} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(this.state.searchField))\n    return (\n      <div className=\"App\">\n        <SearchBox \n          placeholder = \"Monster's name\"\n          changeHandler = {this.changeHandler}\n          />\n        <CardList monsters = {filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}